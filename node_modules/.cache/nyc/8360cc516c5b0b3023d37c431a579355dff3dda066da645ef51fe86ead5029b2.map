{"version":3,"sources":["userController.js"],"names":["UserController","req","res","body","email","status","send","error","firstName","lastName","password","random","val","crypto","randomBytes","user","id","biguint","format","type","isAdmin","db","push","data","find","users"],"mappings":";;;;;;;AACA;;AADA;;;;AAGA;;;;AACA;;;;;;;;IAEMA,c;;;;;;;mCACSC,G,EAAIC,G,EAAI;AACf,gBAAI,CAACD,IAAIE,IAAJ,CAASC,KAAd,EAAqB;AACjB,uBAAOF,IAAIG,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACxBD,4BAAQ,GADgB;AAExBE,2BAAO;AAFiB,iBAArB,CAAP;AAIH,aALD,MAKO,IAAG,CAACN,IAAIE,IAAJ,CAASK,SAAb,EAAwB;AAC3B,uBAAON,IAAIG,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACxBD,4BAAQ,GADgB;AAExBE,2BAAO;AAFiB,iBAArB,CAAP;AAIH,aALM,MAKA,IAAG,CAACN,IAAIE,IAAJ,CAASM,QAAb,EAAuB;AAC1B,uBAAOP,IAAIG,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACxBD,4BAAQ,GADgB;AAExBE,2BAAO;AAFiB,iBAArB,CAAP;AAIH,aALM,MAKA,IAAG,CAACN,IAAIE,IAAJ,CAASO,QAAb,EAAuB;AAC1B,uBAAOR,IAAIG,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACxBD,4BAAQ,GADgB;AAExBE,2BAAO;AAFiB,iBAArB,CAAP;AAIH;AACD,gBAAMI,SAAS,SAATA,MAAS,CAACC,GAAD,EAAQ;AACnB,uBAAOC,iBAAOC,WAAP,CAAmBF,GAAnB,CAAP;AACH,aAFD;;AAIA,gBAAMG,OAAO;AACTC,oBAAIC,wBAAQC,MAAR,CAAeP,OAAO,CAAP,CAAf,EAA0B,KAA1B,CADK;AAETP,uBAAOH,IAAIE,IAAJ,CAASC,KAFP;AAGTI,2BAAWP,IAAIE,IAAJ,CAASK,SAHX;AAITC,0BAAUR,IAAIE,IAAJ,CAASM,QAJV;AAKTC,0BAAUT,IAAIE,IAAJ,CAASO,QALV;AAMTS,sBAAM,QANG;AAOTC,yBAAS;AAPA,aAAb;;AAUAC,6BAAGC,IAAH,CAAQP,IAAR;AACA,mBAAOb,IAAIG,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACxBD,wBAAQ,GADgB;AAExBkB,sBAAMR;AAFkB,aAArB,CAAP;AAIH;;;+BAEMd,G,EAAIC,G,EAAI;AACX,gBAAMa,OAAMM,iBAAGG,IAAH,CAAQ;AAAA,uBAAQT,KAAKX,KAAL,KAAeH,IAAIE,IAAJ,CAASC,KAAxB,IAAiCW,KAAKL,QAAL,KAAkBT,IAAIE,IAAJ,CAASO,QAApE;AAAA,aAAR,CAAZ;AACA,gBAAGK,IAAH,EAAQ;AACJ,uBAAOb,IAAIG,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACxBD,4BAAQ,GADgB;AAExBkB,0BAAM;AACF;AACAP,4BAAID,KAAKC,EAFP;AAGFR,mCAAWO,KAAKP,SAHd;AAIFC,kCAAUM,KAAKN,QAJb;AAKFL,+BAAOW,KAAKX;AALV;;AAFkB,iBAArB,CAAP;AAWH,aAZD,MAaI;AACA,uBAAOF,IAAIG,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACxBD,4BAAO,GADiB;AAExBE,2BAAO;AAFiB,iBAArB,CAAP;AAIH;AACJ;;;;;;AAGL,IAAMkB,QAAQ,IAAIzB,cAAJ,EAAd;kBACeyB,K","file":"userController.js","sourceRoot":"/home/kagabo/banka1/Banka/server/controllers","sourcesContent":["import db from \"./../db/userDB\";\n//import random from \"randomstring\"\n\nimport crypto from \"crypto\";\nimport biguint from \"biguint-format\";\n\nclass UserController{\n    createUser(req,res){\n        if (!req.body.email) {\n            return res.status(400).send({\n                status: 400,\n                error: \"email is required\",\n            });\n        } else if(!req.body.firstName) {\n            return res.status(400).send({\n                status: 400,\n                error: \"first name is required\",\n            });\n        } else if(!req.body.lastName) {\n            return res.status(400).send({\n                status: 400,\n                error: \"last name is required\",\n            })\n        } else if(!req.body.password) {\n            return res.status(400).send({\n                status: 400,\n                error: \"password is required\",\n            });\n        }\n        const random = (val) =>{\n            return crypto.randomBytes(val);\n        } ;\n\n        const user = {\n            id: biguint.format(random(8), 'dec') ,\n            email: req.body.email,\n            firstName: req.body.firstName,\n            lastName: req.body.lastName,\n            password: req.body.password,\n            type: \"client\",\n            isAdmin: false,\n        };\n\n        db.push(user);\n        return res.status(201).send({\n            status: 201,\n            data: user,\n        });\n    }\n\n    signIn(req,res){\n        const user =db.find(user => user.email === req.body.email && user.password === req.body.password);\n        if(user){\n            return res.status(201).send({\n                status: 201,\n                data: {\n                    //token: random.generate(),\n                    id: user.id,\n                    firstName: user.firstName,\n                    lastName: user.lastName,\n                    email: user.email,\n                },\n\n            });\n        }\n        else{\n            return res.status(400).send({\n                status:400,\n                error: \"the user does note exist\",\n            });\n        }\n    }\n}\n\nconst users = new UserController();\nexport default users;"]}