{"version":3,"sources":["userController.js"],"names":["crypto","require","format","UserController","req","res","body","email","status","send","error","firstName","lastName","password","user","id","randoms","type","isAdmin","db","push","data","find","val","randomBytes","users"],"mappings":";;;;;;;;AAAA;;;;;;;;AACA;;AAEA,IAAIA,SAASC,QAAQ,QAAR,CAAb;AACA,IAAIC,SAASD,QAAQ,gBAAR,CAAb;;IAEME,c;;;;;;;mCACSC,G,EAAIC,G,EAAI;AACf,gBAAI,CAACD,IAAIE,IAAJ,CAASC,KAAd,EAAqB;AACjB,uBAAOF,IAAIG,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACxBD,4BAAQ,GADgB;AAExBE,2BAAO;AAFiB,iBAArB,CAAP;AAIH,aALD,MAKO,IAAG,CAACN,IAAIE,IAAJ,CAASK,SAAb,EAAwB;AAC3B,uBAAON,IAAIG,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACxBD,4BAAQ,GADgB;AAExBE,2BAAO;AAFiB,iBAArB,CAAP;AAIH,aALM,MAKA,IAAG,CAACN,IAAIE,IAAJ,CAASM,QAAb,EAAuB;AAC1B,uBAAOP,IAAIG,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACxBD,4BAAQ,GADgB;AAExBE,2BAAO;AAFiB,iBAArB,CAAP;AAIH,aALM,MAKA,IAAG,CAACN,IAAIE,IAAJ,CAASO,QAAb,EAAuB;AAC1B,uBAAOR,IAAIG,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACxBD,4BAAQ,GADgB;AAExBE,2BAAO;AAFiB,iBAArB,CAAP;AAIH;;AAED;AACA,gBAAMI,OAAO;AACTC,oBAAIb,OAAOc,QAAQ,CAAR,CAAP,EAAmB,KAAnB,CADK;AAETT,uBAAOH,IAAIE,IAAJ,CAASC,KAFP;AAGTI,2BAAWP,IAAIE,IAAJ,CAASK,SAHX;AAITC,0BAAUR,IAAIE,IAAJ,CAASM,QAJV;AAKTC,0BAAUT,IAAIE,IAAJ,CAASO,QALV;AAMTI,sBAAM,QANG;AAOTC,yBAAS;AAPA,aAAb;;AAUAC,6BAAGC,IAAH,CAAQN,IAAR;AACA,mBAAOT,IAAIG,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACxBD,wBAAQ,GADgB;AAExBa,sBAAMP;AAFkB,aAArB,CAAP;AAIH;;;+BAEMV,G,EAAIC,G,EAAI;AACX,gBAAMS,OAAMK,iBAAGG,IAAH,CAAQ;AAAA,uBAAQR,KAAKP,KAAL,KAAeH,IAAIE,IAAJ,CAASC,KAAxB,IAAiCO,KAAKD,QAAL,KAAkBT,IAAIE,IAAJ,CAASO,QAApE;AAAA,aAAR,CAAZ;AACA,gBAAGC,IAAH,EAAQ;AACJ,uBAAOT,IAAIG,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACxBD,4BAAQ,GADgB;AAExBa,0BAAM;AACF;AACAN,4BAAID,KAAKC,EAFP;AAGFJ,mCAAWG,KAAKH,SAHd;AAIFC,kCAAUE,KAAKF,QAJb;AAKFL,+BAAOO,KAAKP;AALV;;AAFkB,iBAArB,CAAP;AAWH,aAZD,MAaI;AACA,uBAAOF,IAAIG,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACxBD,4BAAO,GADiB;AAExBE,2BAAO;AAFiB,iBAArB,CAAP;AAIH;AACJ;;;gCAEOa,G,EAAK;AACT,mBAAOvB,OAAOwB,WAAP,CAAmBD,GAAnB,CAAP;AACH;;;;;;AAGL,IAAME,QAAQ,IAAItB,cAAJ,EAAd;kBACesB,K","file":"userController.js","sourceRoot":"/home/kagabo/banka1/Banka/server/controllers","sourcesContent":["import db from \"./../db/userDB\";\n//import random from \"randomstring\"\n\nlet crypto = require(\"crypto\");\nlet format = require(\"biguint-format\");\n\nclass UserController{\n    createUser(req,res){\n        if (!req.body.email) {\n            return res.status(400).send({\n                status: 400,\n                error: \"email is required\",\n            });\n        } else if(!req.body.firstName) {\n            return res.status(400).send({\n                status: 400,\n                error: \"first name is required\",\n            });\n        } else if(!req.body.lastName) {\n            return res.status(400).send({\n                status: 400,\n                error: \"last name is required\",\n            })\n        } else if(!req.body.password) {\n            return res.status(400).send({\n                status: 400,\n                error: \"password is required\",\n            });\n        }\n\n        //\n        const user = {\n            id: format(randoms(4), 'dec'),\n            email: req.body.email,\n            firstName: req.body.firstName,\n            lastName: req.body.lastName,\n            password: req.body.password,\n            type: \"client\",\n            isAdmin: false,\n        };\n\n        db.push(user);\n        return res.status(201).send({\n            status: 201,\n            data: user,\n        });\n    }\n\n    signIn(req,res){\n        const user =db.find(user => user.email === req.body.email && user.password === req.body.password);\n        if(user){\n            return res.status(201).send({\n                status: 201,\n                data: {\n                    //token: random.generate(),\n                    id: user.id,\n                    firstName: user.firstName,\n                    lastName: user.lastName,\n                    email: user.email,\n                },\n\n            });\n        }\n        else{\n            return res.status(400).send({\n                status:400,\n                error: \"the user does note exist\",\n            });\n        }\n    }\n\n    randoms(val) {\n        return crypto.randomBytes(val)\n    }\n}\n\nconst users = new UserController();\nexport default users;"]}