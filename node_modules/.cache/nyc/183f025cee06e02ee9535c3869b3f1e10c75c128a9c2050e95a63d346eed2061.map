{"version":3,"sources":["testUser.js"],"names":["chai","use","chaiHttp","should","token","describe","it","done","user","email","firstName","lastName","password","request","app","post","send","end","req","res","have","status","body","be","a","property","eql","an","data","get","set"],"mappings":"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","file":"testUser.js","sourceRoot":"/home/kagabo/banka1/Banka/server/tests","sourcesContent":["import chai from  \"chai\";\nimport chaiHttp from \"chai-http\";\nimport app from \"../app\";\n\nchai.use(chaiHttp);\nchai.should();\n\nlet token = '';\ndescribe(\"Users\", ()=>{\n    describe(\"POST /\", () => {\n        it(\"should create a new user\", (done) => {\n            const user = {\n                email: \"kagabo@gmail.com\",\n                firstName: \"Kabeho\",\n                lastName: \"Roger\",\n                password: \"ffff\",\n            };\n            chai.request(app)\n                .post(`/api/v1/auth/signup`)\n                .send(user)\n                .end((req, res) => {\n                    res.should.have.status(201);\n                    res.body.should.be.a('object');\n                    done();\n                });\n        });\n        it(\"should not create a new user with empty email\", (done) => {\n            const user = {\n                email: \"\",\n                firstName: \"Kabeho\",\n                lastName: \"Roger\",\n                password: \"ffff\",\n            };\n            chai.request(app)\n                .post(`/api/v1/auth/signup`)\n                .send(user)\n                .end((req, res) => {\n                    res.should.have.status(400);\n                    res.body.should.be.a('object');\n                    res.body.should.have.property(\"status\").eql(400);\n                    res.body.should.have.property(\"error\").eql(\"email is required\");\n                    done();\n                });\n        });\n        it(\"should not create a new user with empty name\", (done) => {\n            const user = {\n                email: \"kagabo@gmail.com\",\n                firstName: \"\",\n                lastName: \"Roger\",\n                password: \"ffff\",\n            };\n            chai.request(app)\n                .post(`/api/v1/auth/signup`)\n                .send(user)\n                .end((req, res) => {\n                    res.should.have.status(400);\n                    res.body.should.be.a('object');\n                    res.body.should.have.property(\"status\").eql(400);\n                    res.body.should.have.property(\"error\").eql(\"first name is required\");\n                    done();\n                });\n        });\n\n        it(\"should not create a new user with empty last name\", (done) => {\n            const user = {\n                email: \"kagabo@gmail.com\",\n                firstName: \"Kabeho\",\n                lastName: \"\",\n                password: \"ffff\",\n            };\n            chai.request(app)\n                .post(`/api/v1/auth/signup`)\n                .send(user)\n                .end((req, res) => {\n                    res.should.have.status(400);\n                    res.body.should.be.a('object');\n                    res.body.should.have.property(\"status\").eql(400);\n                    res.body.should.have.property(\"error\").eql(\"last name is required\");\n                    done();\n                });\n        });\n\n        it(\"should not create a new user with empty last name\", (done) => {\n            const user = {\n                email: \"kagabo@gmail.com\",\n                firstName: \"Kabeho\",\n                lastName: \"fefe\",\n                password: \"\",\n            };\n            chai.request(app)\n                .post(`/api/v1/auth/signup`)\n                .send(user)\n                .end((req, res) => {\n                    res.should.have.status(400);\n                    res.body.should.be.a('object');\n                    res.body.should.have.property(\"status\").eql(400);\n                    res.body.should.have.property(\"error\").eql(\"password is required\");\n                    done();\n                });\n        });\n\n        it(\"should signin\", (done)=>{\n            const user ={\n                email: \"faustinkagabo@gmail.com\",\n                password: \"Fofo1995@\",\n            }\n            chai.request(app)\n                .post('/api/v1/auth/signin')\n                .send(user)\n                .end((req,res)=>{\n                    res.should.have.status(201);\n                    res.body.should.be.a('object');\n                    res.body.should.have.property(\"data\").should.be.an('object');\n                    token = res.body.data.token;\n                    done();\n                })\n        });\n        it(\"should not signin\", (done) => {\n            const user = {\n                email: \"faustinkagabo@gmail.com\",\n                password: \"\",\n            }\n            chai.request(app)\n                .post('/api/v1/auth/signin')\n                .send(user)\n                .end((req, res) => {\n                    res.should.have.status(400);\n                    res.body.should.be.a('object');\n                    res.body.should.have.property(\"error\").eql(\"the user does not exist\");\n                    done();\n                });\n        });\n        \n    });\n    describe('GET /', ()=>{\n        it(\"should get all users while no valid token\", (done)=>{\n            chai.request(app)\n                .get('/api/v1/user/getall')\n                .end((req,res)=>{\n                    res.should.have.status(401);\n                    done();\n                })\n        });\n        it(\"should get all use\", (done) => {\n            chai.request(app)\n                .get('/api/v1/user/getall')\n                .set('Authorization', \"Bearer \" + token)\n                .end((req, res) => {\n                    res.should.have.status(200);\n                    done();\n                });\n        })\n    })\n});\n\n"]}