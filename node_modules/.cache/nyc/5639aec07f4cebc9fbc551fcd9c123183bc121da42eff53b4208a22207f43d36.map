{"version":3,"sources":["userController.js"],"names":["UserController","req","res","status","send","data","db","body","email","error","firstName","lastName","password","random","qty","crypto","randomBytes","user","id","parseInt","type","isAdmin","push","find","token","jwt","sign","expiresIn","users"],"mappings":"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","file":"userController.js","sourceRoot":"/home/kagabo/banka1/Banka/server/controllers","sourcesContent":["import db from \"./../db/userDB\";\n\nimport jwt from \"jsonwebtoken\";\nimport crypto from \"crypto\";\nimport format from \"biguint-format\";\n\n\n\n\nclass UserController{\n    getAllUsers(req,res){\n        return res.status(200).send({\n            status: 200,\n            data: db,\n        });\n    }\n    createUser(req,res){\n        if (!req.body.email) {\n            return res.status(400).send({\n                status: 400,\n                error: \"email is required\",\n            });\n        } else if(!req.body.firstName) {\n            return res.status(400).send({\n                status: 400,\n                error: \"first name is required\",\n            });\n        } else if(!req.body.lastName) {\n            return res.status(400).send({\n                status: 400,\n                error: \"last name is required\",\n            })\n        } else if(!req.body.password) {\n            return res.status(400).send({\n                status: 400,\n                error: \"password is required\",\n            });\n        }\n\n        const random = (qty) => {\n            return crypto.randomBytes(qty)\n        }\n        const user = {\n            id: parseInt(format(random(4), 'dec')),\n            email: req.body.email,\n            firstName: req.body.firstName,\n            lastName: req.body.lastName,\n            password: req.body.password,\n            type: \"client\",\n            isAdmin: false,\n        };\n\n        db.push(user);\n        return res.status(201).send({\n            status: 201,\n            data: user,\n        });\n    }\n\n    signIn(req,res){\n        const user =db.find(user => user.email === req.body.email && user.password === req.body.password);\n        if(user){\n            const token = jwt.sign({\n                id: user.id,\n                email: user.email,\n                isAdmin: user.isAdmin\n            }, \n            'secret' ,\n            {\n                expiresIn: \"1h\",\n            });\n            return res.status(201).send({\n                status: 201,\n                data: {\n                    token: token,\n                    id: user.id,\n                    firstName: user.firstName,\n                    lastName: user.lastName,\n                    email: user.email,\n                },\n            });\n        }\n        else{\n            return res.status(400).send({\n                status:400,\n                error: \"the user does note exist\",\n            });\n        }\n    }\n\n    \n}\n\nconst users = new UserController();\nexport default users;"]}