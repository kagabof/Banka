{"version":3,"sources":["transactionController.js"],"names":["TransactionController","req","res","accountNumber","parseInt","params","account","amount","parseFloat","body","cachierId","accountFound","accountIndex","accountDb","map","index","status","send","error","balance","newTransaction","id","transactionDb","length","creatOn","Date","now","type","accountNmber","cachier","oldBalance","newBalance","push","newAccount","createOn","owner","splice","data","transactionId","transactionType","accountBalance","tran"],"mappings":"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","file":"transactionController.js","sourceRoot":"/home/kagabo/banka1/Banka/server/controllers","sourcesContent":["import userDb from \"./../db/userDB\";\nimport accountDb from \"./../db/accountDB\";\nimport transactionDb from \"./../db/transactionDB\";\n\nclass TransactionController{\n    debiteAccount(req,res){\n        const accountNumber = parseInt(req.params.account);\n        const amount = parseFloat(req.body.amount);\n        const cachierId = parseInt(req.body.cachierId);\n\n        let accountFound;\n        let accountIndex;\n\n        accountDb.map((account, index) => {\n            if (account.accountNumber === accountNumber) {\n                accountFound = account;\n                accountIndex = index;\n            }\n\n        }); \n\n        if (!accountNumber){\n            return res.status(400).send({\n                status: 400,\n                error: \"account required\",\n            }); \n        }else if(!amount){\n            return res.status(400).send({\n                status: 400,\n                error: \"amount required\",\n            });\n        } else if (!accountFound) {\n            return res.status(400).send({\n                status: 400,\n                error: \"account not found\",\n            });\n        } else if (accountFound.balance < amount) {\n            return res.status(400).send({\n                status: 400,\n                error: \"balance is less than the amount\",\n            });\n        }else {\n            const newTransaction = {\n                id: transactionDb.length,\n                creatOn: Date.now(),\n                type: \"debit\",\n                accountNmber: accountNumber,\n                cachier: cachierId,\n                amount: amount,\n                oldBalance: accountFound.balance,\n                newBalance: accountFound.balance - amount,\n            };\n\n            transactionDb.push(newTransaction);\n\n            const newAccount = {\n                id: accountDb.id,\n                accountNumber: accountNumber,\n                createOn: accountDb.createOn,\n                owner: accountDb.owner,\n                type: accountDb.type,\n                status: accountDb.status,\n                balance: accountFound.balance - amount,\n            };\n            accountDb.splice(accountIndex,1,newAccount);\n            return res.status(201).send({\n                status: 201,\n                data: {\n                    transactionId: newTransaction.id,\n                    accountNumber: accountNumber,\n                    amount: amount,\n                    cachier: cachierId,\n                    transactionType: newTransaction.type,\n                    oldBalance: accountFound.balance,\n                    accountBalance: newAccount.balance,\n                }\n            })\n        }\n    }\n\n    creditAccount(req, res) {\n        const accountNumber = parseInt(req.params.account);\n        const amount = parseFloat(req.body.amount);\n        const cachierId = parseInt(req.body.cachierId);\n\n        let accountFound;\n        let accountIndex;\n\n        accountDb.map((account, index) => {\n            if (account.accountNumber === accountNumber) {\n                accountFound = account;\n                accountIndex = index;\n            }\n\n        });\n\n        if (!accountNumber) {\n            return res.status(400).send({\n                status: 400,\n                error: \"account required\",\n            });\n        } else if (!amount) {\n            return res.status(400).send({\n                status: 400,\n                error: \"amount required\",\n            });\n        } else if (!accountFound) {\n            return res.status(400).send({\n                status: 400,\n                error: \"account not found\",\n            });\n        } else {\n            const newTransaction = {\n                id: transactionDb.length,\n                creatOn: Date.now(),\n                type: \"debit\",\n                accountNmber: accountNumber,\n                cachier: cachierId,\n                amount: amount,\n                oldBalance: accountFound.balance,\n                newBalance: accountFound.balance - amount,\n            };\n\n            transactionDb.push(newTransaction);\n\n            const newAccount = {\n                id: accountDb.id,\n                accountNumber: accountNumber,\n                createOn: accountDb.createOn,\n                owner: accountDb.owner,\n                type: accountDb.type,\n                status: accountDb.status,\n                balance: accountFound.balance + amount,\n            };\n            accountDb.splice(accountIndex,1,newAccount);\n            return res.status(201).send({\n                status: 201,\n                data: {\n                    transactionId: newTransaction.id,\n                    accountNumber: accountNumber,\n                    amount: amount,\n                    cachier: cachierId,\n                    transactionType: newTransaction.type,\n                    oldBalance: accountFound.balance,\n                    accountBalance: newAccount.balance,\n                }\n            });\n        }\n    }\n}\n\nconst tran = new TransactionController();\n\nexport default tran;"]}