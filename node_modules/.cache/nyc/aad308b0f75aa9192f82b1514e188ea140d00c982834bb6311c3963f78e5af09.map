{"version":3,"sources":["accountController.js"],"names":["AccountController","req","res","userId","parseFloat","body","owner","userIndex","userFind","userdb","map","user","index","id","status","send","error","type","account","db","length","accountNumber","createOn","Date","now","balance","push","data","firstName","lastName","email","parseInt","find","isAdmin","newAccount","accountFound","splice","accountIndex","userFound","acc"],"mappings":"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","file":"accountController.js","sourceRoot":"/home/kagabo/banka1/Banka/server/controllers","sourcesContent":["import db from \"./../db/accountDB\";\nimport userdb from \"./../db/userDB\";\n\nclass AccountController{\n    createAccount(req,res){\n        const userId = parseFloat(req.body.owner);\n        let userIndex;\n        let userFind;\n\n        userdb.map((user, index)=>{\n            if(user.id === userId){\n                userFind = user;\n                userIndex = index;\n            }\n        })\n\n        if(!userFind){\n            return res.status(400).send({\n                status: 400,\n                error: \"owner not found!\",\n            });\n        }else if(!req.body.type){\n            return res.status(400).send({\n                status: 400,\n                error: \"type is required!\",\n            });\n        }\n        const account = {\n            id: db.length + 1,\n            accountNumber: req.body.accountNumber,\n            createOn: Date.now(),\n            owner: userId,\n            type: req.body.type,\n            status: \"dormant\",\n            balance: 0,\n        }\n        \n\n        db.push(account);\n        return res.status(201).send({\n            status: 201,\n            data: {\n                accountNumber: req.body.accountNumber,\n                firstName: userFind.firstName,\n                lastName: userFind.lastName,\n                email: userFind.email,\n                type: req.body.type,\n                balance: account.balance,\n            },\n        });\n    }\n    activateAccount(req, res) {\n        const userId = parseInt(req.body.id);\n        const accountNumber = parseInt(req.body.accountNumber);\n        const user = userdb.find(user => user.id === userId);\n        const account = db.find(account => account.accountNumber === accountNumber);\n        // let accountFound;\n        // let accountIndex;\n        // let userIndex;\n        // let userFound;\n\n        // userdb.map((user, index) => {\n        //     if (user.id === userId) {\n        //         userIndex = index;\n        //         userFound = user;\n        //     }\n        // });\n\n        // db.map((account, index) => {\n        //     if(account.accountNumber === accountNumber){\n        //         accountFound = account;\n        //         accountIndex = index;\n        //     }\n            \n        // });\n\n        if(!user){\n            return res.status(400).send({\n                status: 400,\n                error: 'user not found',\n            });\n        }else if(user.isAdmin !== true){\n            return res.status(400).send({\n                status: 400,\n                error: 'user is not admin to activate the account',\n            });\n        }else if(!account) {\n            return res.status(400).send({\n                status: 400,\n                error: 'account not found',\n            });\n        }else if(account.status === \"active\"){\n            return res.status(400).send({\n                status: 400,\n                error: 'account is already actived!',\n            });\n        } else {\n            const newAccount = {\n                id: accountFound.id,\n                accountNumber: accountFound.accountNumber,\n                createOn: accountFound.createOn,\n                owner: accountFound.owner,\n                type: accountFound.type,\n                status: \"active\",\n                balance: accountFound.balance,\n            }\n            db.splice(accountIndex, 1 , newAccount);\n            db.map((account, index) => {\n                if (account.accountNumber === accountNumber) {\n                    accountFound = account;\n                    accountIndex = index;\n                }\n\n            });\n            return res.status(201).send({\n                status: 201,\n                data: accountFound.status,\n            })\n        }\n\n    }\n    activateDeactivateAccount(req, res) {\n        const userId = parseInt(req.body.id);\n        const accountNumber = parseInt(req.body.accountNumber);\n        const user = userdb.find(user => user.id === userId);\n        const account = db.find(account => account.accountNumber === accountNumber);\n        let accountFound;\n        let accountIndex;\n\n        let userIndex;\n        let userFound;\n\n        userdb.map((user, index) => {\n            if (user.id === userId) {\n                userIndex = index;\n                userFound = user;\n            }\n        });\n\n        db.map((account, index) => {\n            if(account.accountNumber === accountNumber){\n                accountFound = account;\n                accountIndex = index;\n            }\n            \n        });\n        if(!userFound){\n            return res.status(400).send({\n                status: 400,\n                error: 'user not found',\n            });\n        }else if(userFound.isAdmin !== true){\n            return res.status(400).send({\n                status: 400,\n                error: 'user is not admin to deactivate or activate the account',\n            });\n        }else if(!accountFound) {\n            return res.status(400).send({\n                status: 400,\n                error: 'account not found',\n            });\n        } else if (accountFound.status === \"active\"){\n            const newAccount = {\n                id: accountFound.id,\n                accountNumber: accountFound.accountNumber,\n                createOn: accountFound.createOn,\n                owner: accountFound.owner,\n                type: accountFound.type,\n                status: \"dormant\",\n                balance: accountFound.balance,\n            }\n            db.splice(accountIndex, 1, newAccount);\n            db.map((account, index) => {\n                if (account.accountNumber === accountNumber) {\n                    accountFound = account;\n                    accountIndex = index;\n                }\n\n            });\n            return res.status(201).send({\n                status: 201,\n                data: accountFound.status,\n            });\n        } else if (accountFound.status === \"dormant\") {\n            const newAccount = {\n                id: accountFound.id,\n                accountNumber: accountFound.accountNumber,\n                createOn: accountFound.createOn,\n                owner: accountFound.owner,\n                type: accountFound.type,\n                status: \"active\",\n                balance: accountFound.balance,\n            }\n            db.splice(accountIndex, 1 , newAccount);\n            db.map((account, index) => {\n                if (account.accountNumber === accountNumber) {\n                    accountFound = account;\n                    accountIndex = index;\n                }\n\n            });\n            return res.status(201).send({\n                status: 201,\n                data: accountFound.status,\n            })\n        }\n\n    }\n   \n}\n\nconst acc = new AccountController();\n export default acc;"]}