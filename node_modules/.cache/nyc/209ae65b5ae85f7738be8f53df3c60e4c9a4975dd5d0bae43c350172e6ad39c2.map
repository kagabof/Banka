{"version":3,"sources":["accountController.js"],"names":["AccountController","req","res","userId","parseFloat","body","owner","userIndex","userFind","userdb","map","user","index","id","status","send","error","type","random","qty","crypto","randomBytes","account","parseInt","accountNumber","groupsize","createOn","Date","now","balance","db","push","data","firstName","lastName","email","find","accountFound","accountIndex","isAdmin","newAccount","splice","account1","accountStatus","params","message","date","acc"],"mappings":"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","file":"accountController.js","sourceRoot":"/home/kagabo/banka1/Banka/server/controllers","sourcesContent":["import db from \"./../db/accountDB\";\nimport userdb from \"./../db/userDB\";\nimport crypto from \"crypto\";\nimport format from \"biguint-format\";\n\n\nclass AccountController{\n    createAccount(req,res){\n        const userId = parseFloat(req.body.owner);\n        let userIndex;\n        let userFind;\n\n        userdb.map((user, index)=>{\n            if(user.id === userId){\n                userFind = user;\n                userIndex = index;\n            }\n        })\n\n        if(!userFind){\n            return res.status(400).send({\n                status: 400,\n                error: \"owner not found!\",\n            });\n        }else if(!req.body.type){\n            return res.status(400).send({\n                status: 400,\n                error: \"type is required!\",\n            });\n        }\n\n        const random = (qty) => {\n            return crypto.randomBytes(qty)\n        }\n        const account = {\n            id: parseInt(format(random(4), 'dec')),\n            accountNumber: format(random(6), 'dec', { groupsize: 4 }),\n            createOn: Date.now(),\n            owner: userId,\n            type: req.body.type,\n            status: \"dormant\",\n            balance: 0,\n        }\n        \n\n        db.push(account);\n        return res.status(201).send({\n            status: 201,\n            data: {\n                accountNumber: req.body.accountNumber,\n                firstName: userFind.firstName,\n                lastName: userFind.lastName,\n                email: userFind.email,\n                type: req.body.type,\n                balance: account.balance,\n            },\n        });\n    }\n\n    activateDeactivateAccount(req, res) {\n        const userId = parseInt(req.body.id);\n        const accountNumber = parseInt(req.body.accountNumber);\n        const user = userdb.find(user => user.id === userId);\n        const account = db.find(account => account.accountNumber === accountNumber);\n        \n        let accountFound;\n        let accountIndex;\n\n        db.map((account, index) => {\n            if(account.accountNumber === accountNumber){\n                accountFound = account;\n                accountIndex = index;\n            }\n            \n        });\n        if(!user){\n            return res.status(400).send({\n                status: 400,\n                error: 'user not found',\n            });\n        }else if(user.isAdmin !== true){\n            return res.status(400).send({\n                status: 400,\n                error: 'user is not admin to deactivate or activate the account',\n            });\n        }else if(!account) {\n            return res.status(400).send({\n                status: 400,\n                error: 'account not found',\n            });\n        } else if(account.status === \"active\") {\n            const newAccount = {\n                id: account.id,\n                accountNumber: account.accountNumber,\n                createOn: account.createOn,\n                owner: account.owner,\n                type: accountFound.type,\n                status: \"dormant\",\n                balance: account.balance\n            };\n            db.splice(accountIndex,1,newAccount);\n            const account1 = db.find(account => account.accountNumber === accountNumber);\n            return res.status(201).send({\n                status: 201,\n                data: {\n                    accountNumber: account1.accountNumber,\n                    status: account1.status\n                } \n            });\n        }else{\n            const newAccount = {\n                id: account.id,\n                accountNumber: account.accountNumber,\n                createOn: account.createOn,\n                owner: account.owner,\n                type: account.type,\n                status: \"active\",\n                balance: account.balance,\n            };\n            db.splice(accountIndex, 1 , newAccount);\n            const account1 = db.find(account => account.accountNumber === accountNumber);\n            \n            return res.status(201).send({\n                status: 201,\n                data: {\n                    accountNumber: account1.accountNumber,\n                    accountStatus: account1.status,\n                } \n            });\n        }\n\n    }\n    accountDelete(req, res) {\n        \n        const accountNumber = parseInt(req.params.id);\n        let accountFound;\n        let accountIndex;\n\n        db.map((account, index) => {\n            if (account.accountNumber === accountNumber) {\n                accountFound = account;\n                accountIndex = index;\n            }\n        });\n\n        if (!accountFound) {\n            return res.status(400).send({\n                status: 400,\n                error: \"account not found\",\n            });\n        } else {\n            db.splice(accountIndex, 1);\n            return res.status(202).send({\n                status: 202,\n                message: 'Account successfully deleted',\n                date: accountFound\n            });\n        }\n\n    }\n    findAllAccounts(req,res){\n        return res.status(200).send({\n            status: 200,\n            data: db\n        });\n    }\n\n    // findAnAccount(req,res){\n\n    //     const accountNumber = parseInt(req.params.id);\n    //     let accountFound;\n    //     let accountIndex;\n\n    //     db.map((account, index) => {\n    //         if (account.accountNumber === accountNumber) {\n    //             accountFound = account;\n    //             accountIndex = index;\n    //         }\n    //     });\n\n    //     if (!accountFound) {\n    //         return res.status(400).send({\n    //             status: 400,\n    //             error: \"account not found\",\n    //         });\n    //     } else {\n    //         return res.status(200).send({\n    //             status: 200,\n    //             message: 'Account successfully found',\n    //             date: accountFound\n    //         });\n    //     }\n    // }\n}\n\nconst acc = new AccountController();\n export default acc;"]}