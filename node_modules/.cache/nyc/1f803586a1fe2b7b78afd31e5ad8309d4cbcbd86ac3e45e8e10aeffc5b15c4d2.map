{"version":3,"sources":["accountController.js"],"names":["AccountController","req","res","userId","parseFloat","body","owner","userIndex","userFind","userdb","map","user","index","id","status","send","error","type","account","db","length","accountNumber","createOn","Date","now","balance","push","data","firstName","lastName","email","parseInt","find","accountFound","accountIndex","isAdmin","newAccount","splice","account1","accountStatus","params","message","date","acc"],"mappings":"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","file":"accountController.js","sourceRoot":"/home/kagabo/banka1/Banka/server/controllers","sourcesContent":["import db from \"./../db/accountDB\";\nimport userdb from \"./../db/userDB\";\nclass AccountController{\n    createAccount(req,res){\n        const userId = parseFloat(req.body.owner);\n        let userIndex;\n        let userFind;\n\n        userdb.map((user, index)=>{\n            if(user.id === userId){\n                userFind = user;\n                userIndex = index;\n            }\n        })\n\n        if(!userFind){\n            return res.status(400).send({\n                status: 400,\n                error: \"owner not found!\",\n            });\n        }else if(!req.body.type){\n            return res.status(400).send({\n                status: 400,\n                error: \"type is required!\",\n            });\n        }\n        const account = {\n            id: db.length + 1,\n            accountNumber: req.body.accountNumber,\n            createOn: Date.now(),\n            owner: userId,\n            type: req.body.type,\n            status: \"dormant\",\n            balance: 0,\n        }\n        \n\n        db.push(account);\n        return res.status(201).send({\n            status: 201,\n            data: {\n                accountNumber: req.body.accountNumber,\n                firstName: userFind.firstName,\n                lastName: userFind.lastName,\n                email: userFind.email,\n                type: req.body.type,\n                balance: account.balance,\n            },\n        });\n    }\n\n    activateDeactivateAccount(req, res) {\n        const userId = parseInt(req.body.id);\n        const accountNumber = parseInt(req.body.accountNumber);\n        const user = userdb.find(user => user.id === userId);\n        const account = db.find(account => account.accountNumber === accountNumber);\n        \n        let accountFound;\n        let accountIndex;\n\n        db.map((account, index) => {\n            if(account.accountNumber === accountNumber){\n                accountFound = account;\n                accountIndex = index;\n            }\n            \n        });\n        if(!user){\n            return res.status(400).send({\n                status: 400,\n                error: 'user not found',\n            });\n        }else if(user.isAdmin !== true){\n            return res.status(400).send({\n                status: 400,\n                error: 'user is not admin to deactivate or activate the account',\n            });\n        }else if(!account) {\n            return res.status(400).send({\n                status: 400,\n                error: 'account not found',\n            });\n        } else if(account.status === \"active\") {\n            const newAccount = {\n                id: account.id,\n                accountNumber: account.accountNumber,\n                createOn: account.createOn,\n                owner: account.owner,\n                type: accountFound.type,\n                status: \"dormant\",\n                balance: account.balance\n            };\n            db.splice(accountIndex,1,newAccount);\n            const account1 = db.find(account => account.accountNumber === accountNumber);\n            return res.status(201).send({\n                status: 201,\n                data: {\n                    accountNumber: account1.accountNumber,\n                    status: account1.status\n                } \n            });\n        }else{\n            const newAccount = {\n                id: account.id,\n                accountNumber: account.accountNumber,\n                createOn: account.createOn,\n                owner: account.owner,\n                type: account.type,\n                status: \"active\",\n                balance: account.balance,\n            };\n            db.splice(accountIndex, 1 , newAccount);\n            const account1 = db.find(account => account.accountNumber === accountNumber);\n            \n            return res.status(201).send({\n                status: 201,\n                data: {\n                    accountNumber: account1.accountNumber,\n                    accountStatus: account1.status,\n                } \n            });\n        }\n\n    }\n    accountDelete(req, res) {\n        \n        const accountNumber = parseInt(req.params.id);\n        let accountFound;\n        let accountIndex;\n\n        db.map((account, index) => {\n            if (account.accountNumber === accountNumber) {\n                accountFound = account;\n                accountIndex = index;\n            }\n        });\n\n        if (!accountFound) {\n            return res.status(400).send({\n                status: 400,\n                error: \"account not found\",\n            });\n        } else {\n            db.splice(accountIndex, 1);\n            return res.status(202).send({\n                status: 202,\n                message: 'Account successfully deleted',\n                date: accountFound\n            });\n        }\n\n    }\n    findAllAccounts(req,res){\n        return res.status(200).send({\n            status: 200,\n            data: db\n        });\n    }\n\n    findAnAccount(req,res){\n        // const account1 = parseInt(req.params.accountNumber);\n        \n        // let accountFound;\n        // let accountIndex;\n\n        // db.map((account, index) => {\n        //     if (account.accountNumber === account1) {\n        //         accountFound = account;\n        //         accountIndex = index;\n        //     }else{\n        //         accountFound = \"\";\n        //     }\n        // });\n        // if (!db.find(ac => ac.accountNumber === account1)) {\n        //     return res.status(400).send({\n        //         status: 400,\n        //         error: \"account not found\",\n        //     });\n        // } else {\n        //     return res.status(200).send({\n        //         status: 200,\n        //         message: 'Account successfully found',\n        //         date: accountFound\n        //     });\n        // }\n\n        const accountNumber = parseInt(req.params.id);\n        let accountFound;\n        let accountIndex;\n\n        db.map((account, index) => {\n            if (account.accountNumber === accountNumber) {\n                accountFound = account;\n                accountIndex = index;\n            }\n        });\n\n        if (!accountFound) {\n            return res.status(400).send({\n                status: 400,\n                error: \"account not found\",\n            });\n        } else {\n            return res.status(200).send({\n                status: 200,\n                message: 'Account successfully found',\n                date: accountFound\n            });\n        }\n    }\n}\n\nconst acc = new AccountController();\n export default acc;"]}